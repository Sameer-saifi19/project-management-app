datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  teamId          String?
  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id                   String        @id @default(uuid())
  teamName             String
  productOwnerUserId   String?
  projectManagerUserId String?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        String  @id @default(uuid())
  teamId    String
  projectId String
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             String    @id @default(uuid())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      String
  authorUserId   String
  assignedUserId String?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     String @id @default(uuid())
  userId String
  taskId String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           String  @id @default(uuid())
  fileURL      String
  fileName     String?
  taskId       String
  uploadedById String

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
