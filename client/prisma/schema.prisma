
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  teamId         String?
  team           Team?            @relation(fields: [teamId], references: [id])
  authoredTask   Task[]           @relation("TaskAuthor")
  assignedTask   Task[]           @relation("TaskAssignee")
  attachments    Attachment[]
  comments       Comment[]
  TaskAssignment TaskAssignment[]
}

model Team {
  id                   String        @id @default(uuid())
  teamName             String
  productOwnerUserId   String?
  projectManagerUserId String?
  ProjectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  tasks       Task[]
  projectTeam ProjectTeam[]
}

model ProjectTeam {
  id        String  @id @default(uuid())
  teamId    String
  projectId String
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id              String           @id @default(uuid())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  projectId       String
  authorUserId    String
  assignedUserId  String?
  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model Attachment {
  id           String  @id @default(uuid())
  fileUrl      String
  fileName     String?
  taskId       String
  uploadedById String
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  task         Task    @relation(fields: [taskId], references: [id])
}

model TaskAssignment {
  id     String @id @default(uuid())
  userId String
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}
  